
Microservices Design Patterns

1.Aggregator

One webpage will be fetching data from multiple services.

Aggregates data from different services and presents a unified response.

Example: One database per service.

2.API Gateway

Acts as an entry point and forwards requests to appropriate backend services.

Might involve multiple internal calls.

Helps in load balancing, authentication, logging, etc.

3.Chained (or Chain of Responsibility)

A request is passed through a chain of services (e.g., Service A → Service B → Service C).

Each service processes part of the request.

Can lead to long wait times due to cumulative responses.

4.Asynchronous Messaging

All services communicate asynchronously through a message broker (e.g., Kafka, RabbitMQ).

Improves performance and decouples services.

Services don’t wait for others to respond.

5.Database

Each service has its own dedicated database.

Avoids shared databases.

Helps maintain service autonomy.

6. Event Sourcing

State changes are stored as a sequence of events.

Events represent the source of truth.

Helps in rebuilding application state and auditing.

7.Branch Pattern

Simultaneously processes request and response from two or more services.

Enables parallel processing in independent microservices.

Increases speed and fault tolerance.

8.Command Query Responsibility Segregation (CQRS)

Command: Handles requests that modify data (Create, Update, Delete).

Query: Handles data retrieval operations.

Improves scalability and separates concerns.

9.Circuit Breaker

Prevents a service from trying to execute an operation that is likely to fail.

Used to stop the request and response flow if a service is not working.

Helps in graceful degradation and fault tolerance.

10.Decomposition Design

Breaking down an application into multiple services based on: